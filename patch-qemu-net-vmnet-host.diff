--- net/vmnet-host.c.orig	2024-12-11 07:46:36.000000000 +0800
+++ net/vmnet-host.c	2024-12-14 08:04:05.000000000 +0800
@@ -21,6 +21,10 @@
 static bool validate_options(const Netdev *netdev, Error **errp)
 {
     const NetdevVmnetHostOptions *options = &(netdev->u.vmnet_host);
+
+#if defined(MAC_OS_VERSION_11_0) && \
+    MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_VERSION_11_0
+
     QemuUUID net_uuid;
 
     if (options->net_uuid &&
@@ -28,6 +32,21 @@
         error_setg(errp, "Invalid UUID provided in 'net-uuid'");
         return false;
     }
+#else
+    if (options->has_isolated) {
+        error_setg(errp,
+                   "vmnet-host.isolated feature is "
+                   "unavailable: outdated vmnet.framework API");
+        return false;
+    }
+
+    if (options->net_uuid) {
+        error_setg(errp,
+                   "vmnet-host.net-uuid feature is "
+                   "unavailable: outdated vmnet.framework API");
+        return false;
+    }
+#endif
 
     if ((options->start_address ||
          options->end_address ||
@@ -52,6 +71,8 @@
     xpc_dictionary_set_uint64(if_desc,
                               vmnet_operation_mode_key,
                               VMNET_HOST_MODE);
+#if defined(MAC_OS_VERSION_11_0) && \
+    MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_VERSION_11_0
 
     xpc_dictionary_set_bool(if_desc,
                             vmnet_enable_isolation_key,
@@ -64,6 +85,7 @@
                                 vmnet_network_identifier_key,
                                 net_uuid.data);
     }
+#endif
 
     if (options->start_address) {
         xpc_dictionary_set_string(if_desc,
